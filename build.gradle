// Top-level build file where you can add configuration options common to all sub-projects/modules.

import static com.jbrunton.mymovies.build.ProjectHelper.*

buildscript {
    ext {
        kotlin_version = '1.3.71'
        kotlinx_coroutines_version = '1.3.3'

        android_min_sdk = 24
        android_target_sdk = 27
        android_compile_sdk = 28

        android_lifecycle_version = '2.2.0'
        android_arch_version = '2.1.0'

        libs = [
                rx: [
                        core: [
                                'io.reactivex.rxjava2:rxjava:2.2.0',
                                'io.reactivex.rxjava2:rxkotlin:2.3.0',
                                "org.jetbrains.kotlinx:kotlinx-coroutines-rx2:$kotlinx_coroutines_version"
                        ],
                        android: 'io.reactivex.rxjava2:rxandroid:2.0.2'
                ],
                test: [
                        core: [
                                'junit:junit:4.12',
                                'org.assertj:assertj-core:3.8.0',
                                'org.mockito:mockito-core:2.8.47',
                                'com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0',
                                "org.jetbrains.kotlinx:kotlinx-coroutines-test:$kotlinx_coroutines_version",
                                "io.mockk:mockk:1.9.2"
                        ],
                        android: [
                                'org.mockito:mockito-android:2.13.0',
                                'com.android.support.test:rules:1.0.2',
                                'com.android.support.test:runner:1.0.2',
                                "androidx.arch.core:core-testing:$android_arch_version"
                        ],
                ],
                kotlin: [
                        core: [
                                "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version",
                                "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version",
                                "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinx_coroutines_version"
                        ],
                        android: "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlinx_coroutines_version"
                ],
                inject: [
                        core: 'com.github.jbrunton:mini-container:0.2.0',
                        android: 'com.github.jbrunton:mini-container-android:0.2.0'

                ],
                android: [
                        material: [
                                'com.google.android.material:material:1.0.0-rc02',
                                'androidx.appcompat:appcompat:1.0.0-rc02',
                                'androidx.recyclerview:recyclerview:1.0.0-rc02',
                                'androidx.cardview:cardview:1.0.0-rc02',
                                'androidx.constraintlayout:constraintlayout:2.0.0-alpha2'
                        ],
                        arch: [
                                "androidx.lifecycle:lifecycle-viewmodel-ktx:$android_lifecycle_version",
                                "androidx.lifecycle:lifecycle-livedata-ktx:$android_lifecycle_version",
                                "androidx.lifecycle:lifecycle-viewmodel-savedstate:$android_lifecycle_version",
                                "androidx.lifecycle:lifecycle-runtime-ktx:$android_lifecycle_version",
                                // TODO: this library is deprecated - replace
                                "androidx.lifecycle:lifecycle-extensions:$android_lifecycle_version",
                                'com.snakydesign.livedataextensions:lives:1.3.0'
                        ]
                ]
        ]
    }
    repositories {
        jcenter()
        google()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "http://dl.bintray.com/kotlin/kotlin-eap" }
        flatDir {
            dirs '../aars'
        }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.5.3'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.google.gms:google-services:4.3.3'
        classpath "gradle.plugin.org.jlleitschuh.gradle:ktlint-gradle:3.0.1"

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

plugins {
    id "io.gitlab.arturbosch.detekt" version "1.0.0.RC6-3"
}

apply plugin: "org.jlleitschuh.gradle.ktlint"

allprojects {
    repositories {
        google()
        jcenter()
        maven { url 'https://maven.google.com' }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
        maven { url "http://dl.bintray.com/kotlin/kotlin-eap" }
        maven { url "https://jitpack.io" }
        flatDir {
            dirs '../aars'
        }
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }
}

detekt {
    version = "1.0.0.RC6-3"
    profile("main") {
        input = projectDir
        config = "$projectDir/detekt.yml"
        filters = ".*test.*,.*/resources/.*,.*/tmp/.*"
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

rootProject.subprojects {
    afterEvaluate { project ->
        // Running "testDebug" only runs debug tests for Android modules (not Java modules), whereas
        // running "test" runs Java module unit tests but also unit tests for all build types (incl
        // release) in Android modules. This task runs ONLY the expected set of unit tests for a
        // given module.
        project.task('runUnitTests') {
            group 'CI'
            description 'Run just the unit tests for the subproject'
            dependsOn isAndroidProject(project) ? 'testDebugUnitTest' : 'test'
        }
    }
}

class TestMatrixPlugin implements Plugin<Project> {
    void apply(Project project) {
        def testApk = "./build/outputs/apk/androidTest/debug/${project.getName()}-debug-androidTest.apk"

        ['SmokeTest', 'RoadTest'].each { testMatrix ->
            project.task("firebase${testMatrix}", type:Exec) {
                dependsOn 'assembleDebug', 'assembleDebugAndroidTest'
                commandLine 'gcloud', 'firebase', 'test', 'android', 'run', "../firebase-test-matrices.yml:${testMatrix.toLowerCase()}",
                        '--type', 'instrumentation',
                        '--app', '../app/build/outputs/apk/debug/app-debug.apk',
                        '--test', "${testApk}"
            }
        }
    }
}

rootProject.subprojects { project ->
    def testTasks = project.getTasksByName("connectedCheck", false)
    if (!testTasks.isEmpty()) {
        project.apply(plugin: TestMatrixPlugin)
    }
}
