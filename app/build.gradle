buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
        flatDir {
            dirs '../aars'
        }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}
apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'kotlin-android'
apply plugin: "com.jaredsburrows.spoon"
apply plugin: 'com.google.gms.google-services'

android {
    compileSdkVersion 26
    buildToolsVersion '26.0.2'
    defaultConfig {
        applicationId "com.jbrunton.mymovies"
        minSdkVersion 24
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

}

dependencies {
    implementation 'com.android.support:design:26.1.0'
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    androidTestCompile (name:'cloudtestingscreenshotter_lib', ext:'aar')
    compile 'com.android.support:appcompat-v7:26.1.0'
    compile 'com.android.support:recyclerview-v7:26.1.0'
    compile 'com.android.support:cardview-v7:26.1.0'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    testCompile 'org.mockito:mockito-core:2.8.47'
    testCompile 'junit:junit:4.12'
    testCompile 'org.assertj:assertj-core:3.8.0'
    androidTestCompile 'com.squareup.spoon:spoon-client:2.0.0-SNAPSHOT'

    compile 'com.squareup.retrofit2:retrofit:2.3.0'
    compile 'com.squareup.retrofit2:converter-gson:2.3.0'
    compile 'com.squareup.retrofit2:adapter-rxjava2:2.3.0'
    compile 'com.squareup.okhttp3:logging-interceptor:3.9.0'

    compile 'com.jakewharton:butterknife:8.8.1'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'

    compile 'io.reactivex.rxjava2:rxjava:2.1.0'
    compile 'io.reactivex.rxjava2:rxandroid:2.0.1'

    compile 'com.squareup.picasso:picasso:2.5.2'
    compile 'joda-time:joda-time:2.9.9'
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"

    implementation "android.arch.lifecycle:extensions:1.0.0-alpha9-1"
    testImplementation "android.arch.core:core-testing:1.0.0-alpha9-1"

    compile "com.google.auto.value:auto-value:1.5"
    annotationProcessor "com.google.auto.value:auto-value:1.5"
    compile('com.crashlytics.sdk.android:crashlytics:2.7.1@aar') {
        transitive = true;
    }
}

repositories {
    mavenCentral()
    maven { url 'https://maven.fabric.io/public' }
}

spoon {
    failIfNoDeviceConnected = true
}

def execCommand(cmd, Boolean wait = true) {
    def process = new ProcessBuilder(cmd)
            .redirectInput(ProcessBuilder.Redirect.INHERIT)
            .redirectError(ProcessBuilder.Redirect.INHERIT)
            .redirectOutput(ProcessBuilder.Redirect.INHERIT)
            .start()

    def input = new InputStreamReader(process.in)
    def line
    while ((line = input.readLine()) != null) {
        println line
    }

    if (wait) {
        process.waitFor()
    }
}

def imageName(version) {
    return "system-images;android-$version;default;x86".toString()
}

def emulatorName(version) {
    return "CI_x86_android-$version".toString()
}

task installSdk {
    doLast {
        def sdk = imageName(version)
        println "Installing $sdk..."
        execCommand(["sdkmanager", sdk])
    }
}

task killEmulators(type: Exec) {
    workingDir '.'
    commandLine 'sh', './kill_emulators.sh'
}

task waitForEmulator(type: Exec) {
    workingDir '.'
    commandLine 'sh', './wait_for_emulator.sh'
}

task createEmulator {
    doLast {
        def emulator = emulatorName(version)
        def sdk = imageName(version)
        println("Creating emulator $emulator from $sdk...")
        def cmd = ["bash", "-c",
                   "echo no | avdmanager create avd -f -n $emulator -k '$sdk' --sdcard 128M".toString()]
        println cmd.toString()
        execCommand(cmd)
    }
}

task startEmulator {
    doLast {
        execCommand(['/Users/John/Library/Android/sdk/emulator/emulator',
                "@CI_x86_android-$version".toString(),
                "-no-boot-anim",
                //"-no-window",
                "-skin", "768x1280"], false)

    }
}

createEmulator.mustRunAfter killEmulators
startEmulator.mustRunAfter createEmulator
waitForEmulator.mustRunAfter startEmulator

task prepareEmulator(dependsOn: [installSdk, killEmulators, createEmulator, startEmulator, waitForEmulator])

apply plugin: 'kotlin-android-extensions'